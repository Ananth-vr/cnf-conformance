language: minimal

# crystal:
#   - 'latest'

services:
  - docker

jobs:
  include:
    - stage: K8s
      before_script:
        - wget https://github.com/tmate-io/tmate/releases/download/2.4.0/tmate-2.4.0-static-linux-amd64.tar.xz
        - tar -xvf ./tmate-2.4.0-static-linux-amd64.tar.xz
        # - ./tmate-2.4.0-static-linux-amd64/tmate
        # - ./tmate-2.4.0-static-linux-amd64/tmate show-messages
        # - echo 'sleep'
        # - sleep 1000
        # - shards install
        # Download and install kubectl
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - |
          if [ -z "${SSH_KEY+x}" ]; then
            exit 0
          else
            base64 -d <<< $SSH_KEY > ~/.ssh/id_rsa
            chmod 400 ~/.ssh/id_rsa
            eval $(ssh-agent)
            ssh-add ~/.ssh/id_rsa
            export TIME=$(date +%s)
          # Install CNF-Conformance
            # ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 mkdir -p /tmp/$TIME
            scp -o StrictHostKeyChecking=no -rp $(pwd) root@147.75.55.141:/tmp/$TIME
          # Download and install go
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 tar -xvf go1.13.linux-amd64.tar.gz
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 mv go /tmp/$TIME/go
          # Download and install KinD
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 GOROOT=/tmp/$TIME/go GOPATH=\$HOME/go PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH GO111MODULE=on go get sigs.k8s.io/kind
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 GOROOT=/tmp/$TIME/go GOPATH=\$HOME/go PATH=\$GOPATH/bin:\$GOROOT/bin:\$PATH kind create cluster --kubeconfig /tmp/$TIME/kubeconfig --name $TIME
          # Setup ephemeral dev env
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 "cd /tmp/$TIME ; docker run --rm -it -v \$(pwd):/workspace -w /workspace crystallang/crystal:0.35.1-alpine shards install"
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 "cd /tmp/$TIME ; docker run --rm -it -v \$(pwd):/workspace -w /workspace crystallang/crystal:0.35.1-alpine crystal build tools/ephemeral_env/ephemeral_env.cr --release --static --link-flags '-lxml2 -llzma'"
            cat <<< "/tmp/$TIME/ephemeral_env command alias \$@" > ./crystal
            chmod +x ./crystal
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 mkdir -p /tmp/$TIME/crystal_dir
            scp -o StrictHostKeyChecking=no $(pwd)/crystal root@147.75.55.141:/tmp/$TIME/crystal_dir/crystal
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 "cd /tmp/$TIME/ ; \$(pwd)/ephemeral_env setup -b \$(pwd)/ephemeral_env"
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 "cd /tmp/$TIME/ ; \$(pwd)/ephemeral_env create_env -n $TIME -k /tmp/$TIME/kubeconfig"
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 PATH=/tmp/$TIME/crystal_dir:\$PATH CRYSTAL_DEV_ENV=$TIME crystal version
            ssh -o StrictHostKeyChecking=no -t root@147.75.55.141 "export PATH=/tmp/$TIME/crystal_dir:\$PATH CRYSTAL_DEV_ENV=$TIME ; cd /tmp/$TIME ; crystal spec -v"
          fi
        # - |
          # if [ -z "$KUBECONFIG" ]; then
          # Download and install go
            # wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
            # tar -xvf go1.13.linux-amd64.tar.gz
            # sudo mv go /usr/local
            # export GOROOT=/usr/local/go
            # export GOPATH=$HOME/go
            # export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          # Download and install KinD
            # GO111MODULE=on go get sigs.k8s.io/kind
          # Create a new Kubernetes cluster using KinD
            # kind create cluster
          # else
          # Write Kubeconfig
            # echo "$KUBECONFIG" | base64 -d | tee ./kubeconfig >/dev/null
            # export KUBECONFIG=$(pwd)/kubeconfig
          # fi
        - kubectl get nodes
        # It's possible to download and install KinD using curl, similar as for kubectl
        # This is useful in cases when Go toolchain isn't available or you prefer running stable version
        # Binaries for KinD are available on GitHub Releases: https://github.com/kubernetes-sigs/kind/releases
        # - curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/0.0.1/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
      script: 
        # - shards install
        # - crystal spec -v || travis_terminate 1;
        - docker pull crystallang/crystal:0.35.1-alpine
        - docker run --rm -it -v $PWD:/workspace -w /workspace crystallang/crystal:0.35.1-alpine crystal build src/cnf-conformance.cr --release --static --link-flags "-lxml2 -llzma"
        - |
          if [ -z "${GITHUB_USER+x}" ] || [ -z "${GITHUB_TOKEN+x}" ]; then
            exit 0
          else
            ./cnf-conformance upsert_release
          fi
