# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
# orbs:
#   docker: circleci/docker@1.4.0

jobs:
  build:
    docker:
      - image: docker:latest
    steps: 
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run: |
          docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
          docker build -t conformance/base:latest -f .circleci/Dockerfile .
          docker push conformance/base:latest
          
  cnf_conformance: 
    machine: true
    # working_directory: /mnt/ramdisk
    environment:
      KUBECTL_VERSION: 1.19.2-00
      KIND_VERSION: v0.9.0 
      HELM_VERSION: v3.3.4
      HELM_FILE: linux-amd64.tar.gz 
      HELM_SHA: b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c
      HELM_URL: https://get.helm.sh/helm-$HELM_VERSION-$HELM_FILE
      HELM_ASC: https://github.com/helm/helm/releases/download/$HELM_VERSION/helm-$HELM_VERSION-$HELM_FILE.asc
      CRYSTAL_VERSION: 0.35.1
      CRYSTAL_FILE: crystal_$CRYSTAL_VERSION-1_amd64.deb
      CRYSTAL_URL: https://github.com/crystal-lang/crystal/releases/download/$CRYSTAL_VERSION/$CRYSTAL_FILE
      GOLANG_VERSION: 1.15.2
      GOLANG_FILE: linux-amd64.tar.gz
      GOLANG_SHA: b49fda1ca29a1946d6bb2a5a6982cf07ccd2aba849289508ee0f9918f6bb4552
      GOLANG_URL: https://storage.googleapis.com/golang/go$GOLANG_VERSION.$GOLANG_FILE
      GOPATH: /go
      PATH: $GOPATH/bin:$PATH
      PATH: /usr/local/go/bin:$PATH
    steps: 
      # - setup_remote_docker
      - checkout
      - run:
          name: Install Kubectl
          command: |
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -; \
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list; \
            apt-get update ; \
            apt-get install -y kubectl=$KUBECTL_VERSION 
      - run:
          name: Install Golang
          command: |
            apt-get install -y --no-install-recommends \
            		g++ \
            		gcc \
            		libc6-dev \
            		make \
            		pkg-config 
            
            wget -O go.tgz.asc "$GOLANG_URL.asc" --progress=dot:giga; \
                wget -O go.tgz "$GOLANG_URL" --progress=dot:giga
            
            echo "$GOLANG_SHA *go.tgz" | sha256sum --strict --check -; \
            	  export GNUPGHOME="$(mktemp -d)"; \
            	  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC EC91 7721 F63B D38B 4796'; \
                gpg --batch --verify go.tgz.asc go.tgz; \
            	  gpgconf --kill all; \
            	  rm -rf "$GNUPGHOME" go.tgz.asc
            
            tar -C /usr/local -xzf go.tgz; \
                mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"; \
                rm go.tgz
      - run:       
          name: Install Crystal
          command: |
            wget -O crystal.deb "$CRYSTAL_URL" --progress=dot:giga; 
            apt install -y --no-install-recommends \
                git \
                libssl-dev \
                libxml2-dev \
                libyaml-dev \
                libgmp-dev \
                libz-dev \
                ./crystal.deb \
            	  && rm -rf /var/lib/apt/lists/*
      - run:
          name: Install Helm
          command: |
            wget -O helm.tgz.asc "$HELM_ASC" --progress=dot:giga; \
            wget -O helm.tgz "$HELM_URL" --progress=dot:giga
            
            echo "$HELM_SHA *helm.tgz" | sha256sum --strict --check -; \
            export GNUPGHOME="$(mktemp -d)"; \
            gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys '967F 8AC5 E221 6F9F 4FD2 70AD 92AA 783C BAAE 8E3B'; \
            gpg --batch --verify helm.tgz.asc helm.tgz; \
            gpgconf --kill all; \
            rm -rf "$GNUPGHOME" helm.tgz.asc
            
            tar --strip-components 1 -C /usr/local/bin -xzf helm.tgz; \
            rm helm.tgz
      - run:
          name: Install Kind
          command: |
            GO111MODULE="on" go get sigs.k8s.io/kind@$KIND_VERSION
      - run:
          name: Create Kind Cluster
          command: |
            kind create cluster

      - kubectl get nodes 
          # shards install  
          # crystal src/cnf-conformance.cr setup
          # LOG_LEVEL=info crystal spec spec/cnf_conformance_spec.cr -v


  #Docker executor
  # cnf_conformance: 
  #   docker:
  #     - image: conformance/base:latest
  #   working_directory: /mnt/ramdisk
  #   steps: 
  #     - setup_remote_docker
  #     - checkout
  #     - run: |
  #         kind create cluster
  #         shards install  
  #         crystal src/cnf-conformance.cr setup
  #         LOG_LEVEL=info crystal spec spec/cnf_conformance_spec.cr -v

  configuration_lifecycle: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/configuration_lifecycle_spec.cr -v

  curl_install: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/curl_install_spec.cr -v

  installability: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/installability_spec.cr -v

  microservice: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/microservice_spec.cr -v

  prereqs: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/prereqs_spec.cr -v

  resilience: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/resilience_spec.cr -v

  security: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/security_spec.cr -v

  setup: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/setup_spec.cr -v

  spec_helper: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/spec_helper.cr -v

  statelessness: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/statelessness_spec.cr -v

  utils: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/utils -v

  platform: 
    docker:
      - image: conformance/base:latest
    working_directory: /mnt/ramdisk
    steps: 
      - setup_remote_docker
      - checkout
      - run: |
          kind create cluster
          shards install  
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec spec/platform -v

# Orchestrate or schedule a set of jobs
workflows:
  test:
    jobs:
      - build
      - cnf_conformance:
          requires:
            - build
      # - configuration_lifecycle:
      #     requires:
      #       - build
      # - curl_install:
      #     requires:
      #       - build
      # - installability:
      #     requires:
      #       - build
      # - microservice:
      #     requires:
      #       - build
      # - prereqs:
      #     requires:
      #       - build
      # - resilience:
      #     requires:
      #       - build
      # - security:
      #     requires:
      #       - build
      # - setup:
      #     requires:
      #       - build
      # - spec_helper:
      #     requires:
      #       - build
      # - statelessness:
      #     requires:
      #       - build
      # - utils:
      #     requires:
      #       - build
      # - platform:
      #     requires:
      #       - build
