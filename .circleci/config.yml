# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
# orbs:
#   docker: circleci/docker@1.4.0

commands: # a reusable command with parameters
   install_deps:
      parameters:
         kubectl_version:
           default: "1.19.2-00"
           type: string
         kind_version:
           default: "v0.9.0"
           type: string
         helm_version:
           default: "v3.3.4"
           type: string
         helm_file:
           default: "linux-amd64.tar.gz"
           type: string
         helm_sha:
           default: "b664632683c36446deeb85c406871590d879491e3de18978b426769e43a1e82c"
           type: string
         helm_url:
           default: "https://get.helm.sh/helm"
           type: string
         helm_asc:
           default: "https://github.com/helm/helm/releases/download"
           type: string
         crystal_version:
           default: "0.35.1"
           type: string
         crystal_url:
           default: "https://github.com/crystal-lang/crystal/releases/download"
           type: string
         golang_version:
           default: "1.15.2"
           type: string
         golang_file:
           default: "linux-amd64.tar.gz"
           type: string
         golang_sha:
           default: "b49fda1ca29a1946d6bb2a5a6982cf07ccd2aba849289508ee0f9918f6bb4552"
           type: string
         golang_url:
           default: "https://storage.googleapis.com/golang/go"
           type: string
         golang_path:
           default: "/go"
           type: string
      steps:
         - run:
             name: Setup Retry Function
             command: |
               cat .circleci/retry.sh >> $BASH_ENV
         - run:
             name: Install Kubectl
             command: |
               curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -; \
               echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list; \
               sudo apt-get update ; \
               sudo apt-get install -y kubectl=<<parameters.kubectl_version>> 
         - run:
             name: Install Golang
             command: |
               sudo apt install -y --no-install-recommends \
                        gnupg2 \
                        g++ \
                        gcc \
                        libc6-dev \
                        make \
                        pkg-config 
            
                wget -O go.tgz.asc "<<parameters.golang_url>><<parameters.golang_version>>.<<parameters.golang_file>>.asc" --progress=dot:giga; \
                wget -O go.tgz "<<parameters.golang_url>><<parameters.golang_version>>.<<parameters.golang_file>>" --progress=dot:giga
            
                echo "<<parameters.golang_sha>> *go.tgz" | sha256sum --strict --check -; \
                export GNUPGHOME="$(mktemp -d)"; \
                retry "gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC EC91 7721 F63B D38B 4796'"
                gpg --batch --verify go.tgz.asc go.tgz; \
                gpgconf --kill all || true; \
                rm -rf "$GNUPGHOME" go.tgz.asc
            
                sudo tar -C /usr/local -xzf go.tgz; \
                sudo mkdir -p "<<parameters.golang_path>>/src" "<<parameters.golang_path>>/bin" && sudo chmod -R 777 "<<parameters.golang_path>>"; \
                rm go.tgz
         - run:       
             name: Install Crystal
             command: |
               wget -O crystal.deb "<<parameters.crystal_url>>/<<parameters.crystal_version>>/crystal_<<parameters.crystal_version>>-1_amd64.deb" --progress=dot:giga; 
               sudo apt install -y --no-install-recommends \
                        git \
                        libssl-dev \
                        libxml2-dev \
                        libyaml-dev \
                        libgmp-dev \
                        libz-dev \
                        ./crystal.deb \
                        && sudo rm -rf /var/lib/apt/lists/*
         - run:
             name: Install Helm
             command: |
               wget -O helm.tgz.asc "<<parameters.helm_asc>>/<<parameters.helm_version>>/helm-<<parameters.helm_version>>-<<parameters.helm_file>>.asc" --progress=dot:giga; \
               wget -O helm.tgz "<<parameters.helm_url>>-<<parameters.helm_version>>-<<parameters.helm_file>>" --progress=dot:giga
            
               echo "<<parameters.helm_sha>> *helm.tgz" | sha256sum --strict --check -; \
               export GNUPGHOME="$(mktemp -d)"; \
               gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys '967F 8AC5 E221 6F9F 4FD2 70AD 92AA 783C BAAE 8E3B'; \
               gpg --batch --verify helm.tgz.asc helm.tgz; \
               gpgconf --kill all || true; \
               rm -rf "$GNUPGHOME" helm.tgz.asc
            
               sudo tar --strip-components 1 -C /usr/local/bin -xzf helm.tgz; \
               helm repo add stable https://kubernetes-charts.storage.googleapis.com; \
               rm helm.tgz
         - run:
             name: Install Kind
             command: |
               export PATH=<<parameters.golang_path>>/bin:$PATH
               export PATH=$/usr/local/go/bin:$PATH
               GO111MODULE="on" go get sigs.k8s.io/kind@<<parameters.kind_version>>
         - run:
             name: Create Kind Cluster
             command: |
               export PATH=<<parameters.golang_path>>/bin:$PATH
               export PATH=$/usr/local/go/bin:$PATH
               kind create cluster
               kubectl get nodes 
         - run:
             name: Setup CNF-Conformance
             command: |
               shards install  
               crystal src/cnf-conformance.cr setup

jobs:
  cnf_conformance: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run:
          name: Run Crystal Spec
          command: |
            shards install  
            crystal src/cnf-conformance.cr setup
            LOG_LEVEL=info crystal spec --warnings none spec/cnf_conformance_spec.cr -v

  configuration_lifecycle: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/configuration_lifecycle_spec.cr -v

  curl_install: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/curl_install_spec.cr -v

  installability: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/installability_spec.cr -v

  microservice: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/microservice_spec.cr -v

  prereqs: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/prereqs_spec.cr -v

  resilience: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/resilience_spec.cr -v

  security: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/security_spec.cr -v

  setup: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/setup_spec.cr -v

  spec_helper: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/spec_helper.cr -v

  statelessness: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/statelessness_spec.cr -v

  utils: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/utils -v

  platform: 
    machine:
      image: ubuntu-1604:202007-01
    steps: 
      - checkout
      - install_deps
      - run: |
          crystal src/cnf-conformance.cr setup
          LOG_LEVEL=info crystal spec --warnings none spec/platform -v

# Orchestrate or schedule a set of jobs
workflows:
  test:
    jobs:
      - cnf_conformance
      - configuration_lifecycle
      - curl_install
      - installability
      - microservice
      - prereqs
      - resilience
      - security
      - setup
      - spec_helper
      - statelessness
      - utils
      - platform
